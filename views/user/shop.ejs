<%- include("../../views/partials/user/header") %>
  <style>
    .main-container {
      max-width: 1200px;
      margin: auto;
      padding: 15px;
    }

    .shop-topbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .search-form {
      display: flex;
      align-items: center;
      background-color: #f1f1f1;
      border-radius: 25px;
      overflow: hidden;
      max-width: 250px;
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }

    .search-input {
      flex: 1;
      padding: 8px 10px;
      font-size: 14px;
      border: none;
      outline: none;
      background-color: transparent;
    }

    .search-button {
      padding: 8px 15px;
      background-color: #000000;
      color: #fff;
      border: none;
      cursor: pointer;
      font-size: 14px;
      border-radius: 15px;
      margin-right: 5px;
      transition: background-color 0.3s, transform 0.2s;
    }

    .search-button:hover {
      background-color: #0056b3;
      transform: scale(1.05);
    }

    /* Sidebar Styles */
    .sidebar {
      width: 250px;
      background: #fff;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      height: fit-content;
      position: sticky;
      top: 20px;
    }

    /* Title Styles */
    .filter-title {
      font-size: 18px;
      font-weight: bold;
      color: #333;
      margin-bottom: 10px;
      padding: 8px 0;
      border-bottom: 2px solid #f0f0f0;
    }

    /* Category & Price Buttons */
    .category-options,
    .price-options {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .category-button,
    .price-button {
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.3s ease;
      background: #f8f9fa;
      border: 1px solid #e9ecef;
      color: #495057;
      cursor: pointer;
    }

    .category-button:hover,
    .price-button:hover {
      background: #e9ecef;
      transform: translateY(-2px);
    }

    .category-button.active,
    .price-button.active {
      background: #007bff;
      color: white;
      border-color: #0056b3;
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .product-grid {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      }
    }

    @media (max-width: 768px) {
      .product-list-container {
        flex-direction: column;
      }

      .sidebar {
        width: 100%;
        position: relative;
        top: 0;
        margin-bottom: 20px;
      }

      /* Make filters horizontal scrollable on mobile */
      .category-options,
      .price-options {
        display: flex;
        flex-direction: row;
        overflow-x: auto;
        padding-bottom: 10px;
        gap: 10px;
        -webkit-overflow-scrolling: touch;
      }

      .category-button,
      .price-button {
        white-space: nowrap;
        flex-shrink: 0;
      }

      .product-grid {
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
      }
    }

    @media (max-width: 480px) {
      .product-grid {
        grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
        gap: 15px;
      }

      .product-card {
        padding: 10px;
      }

      /* Adjust shop topbar for mobile */
      .shop-topbar {
        flex-direction: column;
        gap: 15px;
      }

      .search-bar {
        width: 100%;
      }

      .sort-options select {
        width: 100%;
      }
    }

    .filter-section {
      margin-bottom: 20px;
    }

    .filter-title {
      font-weight: bold;
      margin-bottom: 10px;
      font-size: 16px;
      color: #333;
    }

    .filter-item {
      margin: 5px 0;
    }

    .filter-item a {
      text-decoration: none;
      color: #f4f4f4;
    }

    .filter-item a:hover {
      color: #007bff;
    }

    .product-list-container {
      display: flex;
      gap: 20px;
      position: relative;
    }

    .product-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 20px;
      flex: 1;
    }

    .product-card {
      background: #fff;
      border-radius: 12px;
      padding: 15px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      transition: transform 0.3s ease, box-shadow 0.3s ease;      width: 100%;
    }

    .product-card img {
      max-width: 100%;
      height: auto;
      border-radius: 5px;
    }

    .wishlist-btn {
      position: absolute;
      top: 15px;
      right: 15px;
      background: rgba(255, 255, 255, 0.9);
      border-radius: 50%;
      width: 35px;
      height: 35px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      z-index: 2;
    }

    .wishlist-btn i {
      color: #666;
      font-size: 18px;
      transition: all 0.3s ease;
    }

    .wishlist-btn:hover {
      transform: scale(1.1);
      background: white;
    }

    .wishlist-btn.active i {
      color: #ff4444;
    }

    .wishlist-btn:hover i {
      color: #ff4444;
    }

    .add-to-cart-btn {
      background-color: #46698f;
      color: #fff;
      padding: 10px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      width: 100%;
      margin-top: 10px;
    }

    .pagination {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin: 20px 0;
    }

    .pagination a {
      padding: 8px 12px;
      background-color: #f0f0f0;
      border: 1px solid #ddd;
      color: #333;
      text-decoration: none;
    }

    .pagination .active {
      background-color: #007bff;
      color: #fff;
    }

    .price-filter {
      padding: 10px;
      background-color: #f9f9f9;
      border-radius: 8px;
      margin-top: 20px;
    }

    .price-filter .price-options {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .price-button {
      padding: 12px 20px;
      background-color: #f1f1f1;
      color: #333;
      border: 1px solid #ddd;
      border-radius: 30px;
      cursor: pointer;
      transition: background-color 0.3s, transform 0.2s;
      text-align: center;
      font-size: 14px;
    }

    .price-button:hover {
      background-color: #007bff;
      color: white;
      transform: scale(1.05);
    }

    .price-button:active {
      transform: scale(0.95);
    }

    .category-brand-container {
      text-align: center;
    }

    /* hover effect */
    .product-card {
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .product-card:hover {
      transform: scale(1.05);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.12);
    }

    .product__item__pic {
      height: 200px;
      background-size: cover;
      background-position: center;
      border-radius: 8px;
      margin-bottom: 10px;
    }

    .product__item__text {
      padding: 10px 0 40px;
      position: relative;
    }

    .name-heart-container {
      display: block;
    }

    .product__item__text h6 {
      margin-bottom: 8px;
      font-size: 14px;
      font-weight: 600;
      width: 100%;
    }

    .simple-cart-form {
      display: inline-block;
    }

    .product-name {
      font-size: 15px;
      font-weight: 600;
      color: #333;
      margin-bottom: 8px;
      line-height: 1.4;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      transition: color 0.3s ease;
    }

    .product-card:hover .product-name {
      color: #000000;  /* Change to red on hover */
    }

    /* Update the product link style */
    .product-name p {
      color: inherit;
      text-decoration: none;
      cursor: pointer;
    }

    /* Ensure text remains visible during hover */
    .product__item__text h6 p {
      color: #333;
      transition: color 0.3s ease;
    }

    .product-card:hover .product__item__text h6 p {
      color: #ff4444;  /* Change to red on hover */
    }
  </style>
  <div class="main-container">
    
    <section class="shop-page container">
      <div class="shop-topbar">
        <!-- ... (keep breadcrumb unchanged) ... -->
        <div class="search-bar">
          <input type="text" id="search-input" placeholder="Search items..." class="search-input"
            oninput="handleSearch()">
        </div>
        <div class="sort-options">
          <select id="sort-select" onchange="handleSort(this.value)">
            <option value="" selected>No Sort</option>
            <option value="newArrivals" <%=(typeof filters !=='undefined' && filters.selectedSort==='newArrivals' ) ? 'selected' : '' %>>New Arrivals</option>
            <option value="priceLowHigh" <%=(typeof filters !=='undefined' && filters.selectedSort==='priceLowHigh' ) ? 'selected' : '' %>>Price: Low to High</option>
            <option value="priceHighLow" <%=(typeof filters !=='undefined' && filters.selectedSort==='priceHighLow' ) ? 'selected' : '' %>>Price: High to Low</option>
            <option value="aToZ" <%=(typeof filters !=='undefined' && filters.selectedSort==='aToZ' ) ? 'selected' : '' %>>A - Z</option>
            <option value="zToA" <%=(typeof filters !=='undefined' && filters.selectedSort==='zToA' ) ? 'selected' : '' %>>Z - A</option>
          </select>
        </div>
      </div>
      <div class="row">
        <div class="col-lg-12">
          <div class="product__details__breadcrumb">
            <a href="/">Home</a>
            <span>Shop</span>
          </div>
        </div>
      </div>
      <div class="product-list-container">

        <aside class="sidebar">
          <!-- Category Filter -->
          <div class="category-filter">
            <div class="filter-title">Filter by Category</div>
            <div class="category-options">
              <button type="button" 
                class="category-button <%= !filters.selectedCategory || filters.selectedCategory === 'all' ? 'active' : '' %>" 
                onclick="filterByCategory('all')">
                All
              </button>
              <% category.forEach(cat => { %>
                <button type="button" 
                  class="category-button <%= filters.selectedCategory === cat._id.toString() ? 'active' : '' %>" 
                  onclick="filterByCategory('<%= cat._id %>')">
                  <%= cat.name %>
                </button>
              <% }); %>
            </div>
          </div>

          <!-- Price Filter -->
          <div class="price-filter">
            <div class="filter-title">Filter by Price</div>
            <div class="price-options">
              <button type="button" class="price-button" onclick="handlePriceFilter('all')">All Prices</button>
              <button type="button" class="price-button" onclick="handlePriceFilter(0, 500)">Under ₹500</button>
              <button type="button" class="price-button" onclick="handlePriceFilter(500, 1000)">₹500 - ₹1000</button>
              <button type="button" class="price-button" onclick="handlePriceFilter(1000, 1500)">₹1000 - ₹1500</button>
              <button type="button" class="price-button" onclick="handlePriceFilter(1500, 100000)">Above ₹1500</button>
            </div>
          </div>
        </aside>

     
        <main class="product-grid" id="product-grid">
        
          <% if (products && products.length> 0) { %>
          
            <% products.forEach(product=> { %>
              
              <div class="product-card" data-category="<%= product.category %>" data-price="<%= product.salePrice %>"
                data-rating="<%= product.rating %>" data-name="<%= product.productName.toLowerCase() %>"
                data-date="<%= product.createdAt %>">

                <div class="product__item" onclick="window.location.href='/productDetails?id=<%= product._id %>'">
                  <div class="product__item__pic set-bg" data-setbg="<%= product.image1 || 'default-image.jpg' %>">
                    <% if (product.label) { %>
                      <span class="label">
                        <%= product.label %>
                      </span>
                      <% } %>
                    <button class="wishlist-btn ${isInWishlist ? 'active' : ''}" 
                            onclick="event.stopPropagation(); toggleWishlist(this, '${product._id}')">
                      <i class="fa ${isInWishlist ? 'fa-heart' : 'fa-heart-o'}"></i>
                    </button>
                  </div>

                  <div class="product__item__text">
                    <h6>
                      <p onclick="window.location.href='/productDetails?id=${product._id}'">
                        ${product.productName}
                      </p>
                    </h6>
                    <div class="rating">
                      ${Array(5).fill(0).map((_, i) => 
                        `<i class="fa ${i < product.rating ? 'fa-star' : 'fa-star-o'}"></i>`
                      ).join('')}
                    </div>
                    <p>
                      ${product.variants && product.variants[0] 
                        ? `Price: ₹${product.variants[0].price}` 
                        : ''}
                    </p>
                  </div>
                </div>
              </div>
              
              <% }); %>
                <% } else { %>
                  <p>No products found</p>
                  <% } %>
        </main>
      </div>

      <div class="pagination-container">
        <button id="prev-page" onclick="changePage(-1)">« Prev</button>
        <span id="page-info">Page <span id="current-page">1</span> of <span id="total-pages"></span></span>
        <button id="next-page" onclick="changePage(1)">Next »</button>
      </div>

    </section>
  </div>


  

  <script>
    let currentPage = 1;
    const itemsPerPage = 12; // Adjust as needed

    async function updateProducts(page = 1) {
      // Get all filter values
      const searchQuery = document.getElementById('search-input')?.value?.trim() || '';
      const sortValue = document.getElementById('sort-select')?.value || '';
      const activeCategory = document.querySelector('.category-button.active')?.getAttribute('onclick')?.match(/'([^']+)'/)?.[1] || 'all';
      const activePriceRange = document.querySelector('.price-button.active')?.dataset || null;
      
      // Build query parameters object
      const queryParams = {};
      
      // Only add parameters if they have values
      if (searchQuery) queryParams.search = searchQuery;
      if (sortValue) queryParams.sort = sortValue;
      if (activeCategory !== 'all') queryParams.category = activeCategory;
      if (page) queryParams.page = page;
      
      // Add price range parameters if they exist
      if (activePriceRange) {
        queryParams.minPrice = activePriceRange.min;
        queryParams.maxPrice = activePriceRange.max;
      }

      // Convert query parameters to URL string
      const queryString = new URLSearchParams(queryParams).toString();

      try {
        const response = await fetch(`/shop/filter?${queryString}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();
        console.log(data);
        
        if (response.ok) {
          // Update product grid
          const productGrid = document.getElementById('product-grid');
          productGrid.innerHTML = renderProducts(data.products);
          initializeProductImages();
          
          // Update pagination
          updatePagination(data.currentPage, data.totalPages);
          
          // Update URL without refreshing page
          window.history.pushState({}, '', `/shop?${queryString}`);
        } else {
          console.error('Error fetching products:', data);
        }
      } catch (error) {
        console.error('Error:', error);
      }
    }

    // Helper function to render products
    function renderProducts(products) {
      if (!products || products.length === 0) {
        return '<p>No products found</p>';
      }

      const wishlistItems = JSON.parse(localStorage.getItem('wishlistItems') || '[]');
      
      return products.map(product => {
        const isInWishlist = wishlistItems.includes(product._id);
        return `
          <div class="product-card" data-category="${product.category}" data-price="${product.salePrice}" 
               data-name="${product.productName.toLowerCase()}" data-date="${product.createdAt}">
            
            <div class="product__item" onclick="window.location.href='/productDetails?id=${product._id}'">
              <div class="product__item__pic set-bg" data-setbg="${product.image1 || 'default-image.jpg'}">
                ${product.label ? `<span class="label">${product.label}</span>` : ''}
                <button class="wishlist-btn ${isInWishlist ? 'active' : ''}" 
                        onclick="event.stopPropagation(); toggleWishlist(this, '${product._id}')">
                  <i class="fa ${isInWishlist ? 'fa-heart' : 'fa-heart-o'}"></i>
                </button>
              </div>

              <div class="product__item__text">
                <h6 class="product-name">
                  ${product.productName}
                </h6>
                <div class="product-price">
                  ${product.variants && product.variants[0] 
                    ? `₹${product.variants[0].price}` 
                    : ''}
                </div>
              </div>
            </div>
          </div>
        `;
      }).join('');
    }

    // Update pagination UI
    function updatePagination(currentPage, totalPages) {
      document.getElementById('current-page').textContent = currentPage;
      document.getElementById('total-pages').textContent = totalPages;
      document.getElementById('prev-page').disabled = currentPage <= 1;
      document.getElementById('next-page').disabled = currentPage >= totalPages;
    }

    // Event handlers
    function handleSearch() {
      currentPage = 1; // Reset to first page when searching
      updateProducts(currentPage);
    }

    async function handleSort(value) {
      currentPage = 1; // Reset to first page when sorting
      await updateProducts(currentPage);
    }

    function filterByCategory(categoryId) {
      // Update active class
      document.querySelectorAll('.category-button').forEach(btn => btn.classList.remove('active'));
      event.target.classList.add('active');
      
      currentPage = 1; // Reset to first page when filtering
      updateProducts(currentPage);
    }

    function changePage(direction) {
      currentPage += direction;
      updateProducts(currentPage);
    }

    // Add debounce for search
    let searchTimeout;
    document.getElementById('search-input').addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        handleSearch();
      }, 300);
    });

    // Initial load
    document.addEventListener('DOMContentLoaded', () => {
      updateProducts(1);
      initializeWishlistStates();
    });

    function toggleWishlist(button, productId) {
      fetch('/addToWishlist', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId }),
        credentials: 'include'
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (data.status) {
            const icon = button.querySelector('i');
            if (data.action === 'add') {
              // Add to wishlist
              icon.classList.remove('fa-heart-o');
              icon.classList.add('fa-heart');
              button.classList.add('active');
              
              // Show success message
              Swal.fire({
                icon: 'success',
                title: 'Added to Wishlist!',
                text: 'Product has been added to your wishlist',
                showConfirmButton: false,
                timer: 1500
              });
            } else {
              // Remove from wishlist
              icon.classList.remove('fa-heart');
              icon.classList.add('fa-heart-o');
              button.classList.remove('active');
              
              // Show remove message
              Swal.fire({
                icon: 'success',
                title: 'Removed from Wishlist!',
                text: 'Product has been removed from your wishlist',
                showConfirmButton: false,
                timer: 1500
              });
            }
            
            // Update localStorage to maintain state
            let wishlistItems = JSON.parse(localStorage.getItem('wishlistItems') || '[]');
            if (data.action === 'add') {
              wishlistItems.push(productId);
            } else {
              wishlistItems = wishlistItems.filter(id => id !== productId);
            }
            localStorage.setItem('wishlistItems', JSON.stringify(wishlistItems));
          }
        })
        .catch(error => {
          console.error('Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong! Please try again.',
          });
        });
    }

    // Add this function to initialize wishlist states on page load
    function initializeWishlistStates() {
      const wishlistItems = JSON.parse(localStorage.getItem('wishlistItems') || '[]');
      document.querySelectorAll('.wishlist-btn').forEach(button => {
        const productId = button.getAttribute('onclick').match(/'([^']+)'/)[1];
        const icon = button.querySelector('i');
        
        if (wishlistItems.includes(productId)) {
          icon.classList.remove('fa-heart-o');
          icon.classList.add('fa-heart');
          button.classList.add('active');
        } else {
          icon.classList.remove('fa-heart');
          icon.classList.add('fa-heart-o');
          button.classList.remove('active');
        }
      });
    }

    function handlePriceFilter(min, max) {
      // Remove active class from all price buttons
      document.querySelectorAll('.price-button').forEach(btn => {
        btn.classList.remove('active');
        delete btn.dataset.min;
        delete btn.dataset.max;
      });

      // Add active class and dataset to clicked button
      const button = event.target;
      button.classList.add('active');
      
      if (min !== 'all') {
        button.dataset.min = min;
        button.dataset.max = max;
      }

      // Reset to first page and update products
      currentPage = 1;
      updateProducts(currentPage);
    }

    // Add this after the renderProducts function
    function initializeProductImages() {
      document.querySelectorAll('.set-bg').forEach(element => {
        const bg = element.getAttribute('data-setbg');
        element.style.backgroundImage = `url(${bg})`;
      });
    }
  </script>



  <%- include("../../views/partials/user/footer") %>
