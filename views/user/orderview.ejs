<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Add SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.29/jspdf.plugin.autotable.min.js"></script>
</head>

<body class="bg-gray-100">
    <!-- New Header Section -->
    <div class="bg-white shadow-md mb-8">
        <div class="container mx-auto px-4 py-6">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div>
                    <h1 class="text-3xl font-bold text-gray-800">Order History</h1>
                    <nav class="flex mt-2" aria-label="Breadcrumb">
                        <ol class="inline-flex items-center space-x-2 text-sm text-gray-500">
                            <li>
                                <a href="/userProfile" class="hover:text-blue-600 transition-colors">
                                    <i class="fas fa-user mr-1"></i>Profile
                                </a>
                            </li>
                            <li>
                                <i class="fas fa-chevron-right text-xs"></i>
                            </li>
                            <li>
                                <a href="/order-history" class="hover:text-blue-600 transition-colors">
                                    <i class="fas fa-shopping-bag mr-1"></i>Order History
                                </a>
                            </li>
                            <li>
                                <i class="fas fa-chevron-right text-xs"></i>
                            </li>
                            <li class="text-blue-600">
                                <i class="fas fa-eye mr-1"></i>Order Details
                            </li>
                        </ol>
                    </nav>
                </div>
                <div class="mt-4 md:mt-0">
                  
                </div>
            </div>
        </div>
    </div>

    <div class="container mx-auto px-4">
        <!-- Product Card -->
        <div class="bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 mb-6">
            <div class="p-6 border-b border-gray-200">
                <div class="flex flex-col md:flex-row justify-between items-start md:items-center">
                    <div class="mb-2 md:mb-0">
                        <h2 class="text-xl font-semibold text-gray-800">
                            <i class="fas fa-box-open text-blue-500 mr-2"></i>
                            <%= product.productName %>
                        </h2>
                        <p class="text-gray-600 text-sm mt-1">
                            Product Status: <%= order.status %>
                        </p>
                    </div>
                </div>
            </div>

            <div class="p-6">
                <!-- Product Details -->
                <div class="mb-6">
                    <h3 class="text-lg font-medium text-gray-800 mb-4">Product Info</h3>
                    <div class="flex items-center">
                        <% if(product.image1) { %>
                            <img src="<%= product.image1 %>" class="w-16 h-16 object-cover rounded-lg"
                                alt="<%= product.productName %>">
                            <% } else { %>
                                <div class="w-16 h-16 bg-gray-200 rounded-lg"></div>
                                <% } %>
                                    <div class="ml-4">
                                        <h4 class="font-medium text-gray-800">
                                            <%= product.productName %>
                                        </h4>
                                        <p class="text-gray-600 text-sm">
                                            Quantity: <%= product.quantity %>
                                        </p>
                                    </div>
                    </div>
                </div>

                <!-- Price Information -->
                <div class="bg-blue-50 p-4 rounded-lg">
                    <h3 class="text-lg font-medium text-blue-800 mb-2">Price Information</h3>
                    
                    <div class="checkout-summary">
                        <div class="flex justify-between mb-2">
                            <span class="text-gray-700">Original Subtotal</span>
                            <span class="text-gray-700">₹<%= order.originalSubtotal ? order.originalSubtotal.toFixed(2) : (order.totalAmount).toFixed(2) %></span>
                        </div>
                        
                        <% if (order.productDiscount && order.productDiscount > 0) { %>
                        <div class="flex justify-between mb-2 text-green-600">
                            <span>Product Discount</span>
                            <span>-₹<%= order.productDiscount.toFixed(2) %></span>
                        </div>
                        <% } %>
                        
                        <div class="flex justify-between mb-2">
                            <span class="text-gray-700">Subtotal</span>
                            <span class="text-gray-700">₹<%= order.subtotal ? order.subtotal.toFixed(2) : (order.totalAmount - 40).toFixed(2) %></span>
                        </div>
                        
                        <div class="flex justify-between mb-2">
                            <span class="text-gray-700">Delivery Charge</span>
                            <span class="text-gray-700">₹<%= order.deliveryCharge ? order.deliveryCharge.toFixed(2) : '40.00' %></span>
                        </div>
                        
                        <div class="flex justify-between pt-2 border-t border-gray-300">
                            <span class="font-bold text-gray-800">Total</span>
                            <span class="font-bold text-gray-800">₹<%= order.totalAmount.toFixed(2) %></span>
                        </div>
                    </div>
                </div>

                <!-- Add Customer Address Section -->
                <div class="bg-gray-50 p-4 rounded-lg mt-4">
                    <h3 class="text-lg font-medium text-gray-800 mb-2">
                        <i class="fas fa-map-marker-alt text-blue-500 mr-2"></i>
                        Delivery Address
                    </h3>
                    <div class="text-gray-700">
                        <p class="font-medium"><%= address.name %></p>
                        <p><%= address.landMark %></p>
                        <p><%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                        <p class="mt-1">
                            <i class="fas fa-phone text-blue-500 mr-2"></i>
                            <%= address.phone %>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Info -->
        <div class="bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 mb-6">
            <div class="p-6 border-b border-gray-200">
                <h2 id="order-status" class="text-xl font-semibold text-gray-800">
                    Order Status: <%= order.status %>
                </h2>
                <p class="text-gray-600 text-sm mt-1">
                    Order ID: <%= order.orderId %>
                </p>

                <% if (order.status === 'Pending') { %>
                    <div id="aaa" class="mt-4">
                        <button type="button"
                            data-bs-toggle="modal" 
                            data-bs-target="#cancelOrderModal"
                            class="bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-lg transition duration-300">
                            Cancel Order
                        </button>
                    </div>
                <% } %>

                <% if (order.status === 'Delivered') { %>
                    <div class="mt-4 flex gap-4">
                        <!-- Return button section -->
                        <% if (product.returnStatus === 'Rejected') { %>
                            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded-lg flex items-center">
                                <i class="fas fa-times-circle mr-2"></i>
                                Return Request Rejected
                            </div>
                        <% } else if (product.returnStatus === 'Approved') { %>
                            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-2 rounded-lg flex items-center">
                                <i class="fas fa-check-circle mr-2"></i>
                                Return Request Approved
                            </div>
                        <% } else if (product.returnStatus === 'Pending') { %>
                            <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-2 rounded-lg flex items-center">
                                <i class="fas fa-clock mr-2"></i>
                                Return Request Pending
                            </div>
                        <% } else if (product.isReturned) { %>
                            <div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-2 rounded-lg flex items-center">
                                <i class="fas fa-undo mr-2"></i>
                                Order Returned
                            </div>
                        <% } else { %>
                            <button data-bs-toggle="modal" 
                                    data-bs-target="#returnModal<%= order._id %>" 
                                    class="bg-yellow-500 hover:bg-yellow-600 text-white font-medium py-2 px-4 rounded-lg transition duration-300">
                                <i class="fas fa-undo mr-2"></i>
                                Return Order
                            </button>
                        <% } %>

                        <!-- Invoice download button - Always show for delivered orders -->
                        <button onclick="generateInvoice()" 
                                class="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded-lg transition duration-300 flex items-center">
                            <i class="fas fa-file-pdf mr-2"></i>
                            Download Invoice
                        </button>
                    </div>
                <% } else if (order.status !== 'Pending' && order.status !== 'Cancelled') { %>
                    <!-- Show only invoice button for other completed statuses -->
                    <div class="mt-4">
                        <button onclick="generateInvoice()" 
                                class="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded-lg transition duration-300 flex items-center">
                            <i class="fas fa-file-pdf mr-2"></i>
                            Download Invoice
                        </button>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Add Bootstrap JS for modal functionality -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Add success/error toast notifications -->
    <script>
        let currentOrderId = '';

        function proceedWithCancellation() {
            const reason = document.getElementById('cancelReason').value;
            if (!reason) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please select a cancellation reason'
                });
                return;
            }

            // Close the modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('cancelOrderModal'));
            modal.hide();

            // Proceed with the existing cancel confirmation
            confirmCancelOrder('<%= order._id %>');
        }

        function confirmCancelOrder(orderId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You want to cancel this order?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, cancel it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    cancelOrder(orderId);
                }
            });
        }

        function cancelOrder(orderId) {
            fetch(`/cancel-order/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Order Cancelled',
                            text: 'Your order has been cancelled successfully',
                            timer: 1500,
                            showConfirmButton: false
                        });
                        document.getElementById('aaa').style.display = 'none';
                        document.getElementById(`order-status`).innerText = 'Order Status: Cancelled';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to cancel order. Please try again.'
                    });
                });
        }

        function showToast(type, message) {
            const toastContainer = document.createElement('div');
            toastContainer.style.position = 'fixed';
            toastContainer.style.top = '20px';
            toastContainer.style.right = '20px';
            toastContainer.style.zIndex = '1050';

            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');

            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;

            toastContainer.appendChild(toast);
            document.body.appendChild(toastContainer);

            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();

            toast.addEventListener('hidden.bs.toast', () => {
                toastContainer.remove();
            });
        }

        function generateInvoice() {
            try {
                // Order data from page
                const orderData = {
                    orderId: '<%= order.orderId %>',
                    createdAt: '<%= order.createdAt %>',
                    paymentMethod: '<%= order.paymentMethod %>',
                    totalAmount: parseFloat('<%= order.totalAmount %>'),
                    originalSubtotal: parseFloat('<%= order.originalSubtotal || order.totalAmount %>'),
                    productDiscount: parseFloat('<%= order.productDiscount || 0 %>'),
                    subtotal: parseFloat('<%= order.subtotal || (order.totalAmount - 40) %>'),
                    deliveryCharge: parseFloat('<%= order.deliveryCharge || 40 %>')
                };

                const productData = {
                    productName: '<%= product.productName %>',
                    quantity: parseInt('<%= product.quantity %>', 10)
                };

                const addressData = {
                    name: '<%= address.name %>',
                    landMark: '<%= address.landMark %>',
                    city: '<%= address.city %>',
                    state: '<%= address.state %>',
                    pincode: '<%= address.pincode %>',
                    phone: '<%= address.phone %>'
                };

                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();

                // Change company name from FASHION FEET to OXYBOO
                doc.setFontSize(24);
                doc.setTextColor(74, 108, 247); // Blue color
                doc.text('OXYBOO', 105, 20, { align: 'center' });
                
                // Add invoice title
                doc.setFontSize(16);
                doc.setTextColor(0, 0, 0);
                doc.text('INVOICE', 105, 35, { align: 'center' });

                // Add horizontal line
                doc.setLineWidth(0.5);
                doc.line(20, 40, 190, 40);

                // Add invoice details
                doc.setFontSize(12);
                doc.text('Order Details:', 20, 55);
                doc.setFontSize(10);
                doc.text(`Order ID: ${orderData.orderId}`, 20, 65);
                doc.text(`Order Date: ${new Date(orderData.createdAt).toLocaleDateString()}`, 20, 75);
                doc.text(`Payment Method: ${orderData.paymentMethod}`, 20, 85);

                // Add customer details
                doc.setFontSize(12);
                doc.text('Customer Details:', 120, 55);
                doc.setFontSize(10);
                doc.text(`Name: ${addressData.name}`, 120, 65);
                doc.text(`Address: ${addressData.landMark}`, 120, 75);
                doc.text(`${addressData.city}, ${addressData.state} - ${addressData.pincode}`, 120, 85);
                doc.text(`Phone: ${addressData.phone}`, 120, 95);

                // Add product details table
                const tableColumn = ['Product', 'Quantity', 'Price per Unit', 'Total'];
                const tableRows = [
                    [
                        productData.productName,
                        productData.quantity,
                        `Rs. ${(orderData.totalAmount / productData.quantity).toFixed(2)}`,
                        `Rs. ${orderData.totalAmount.toFixed(2)}`
                    ]
                ];

                // Adjust column widths to fit the page
                doc.autoTable({
                    head: [tableColumn],
                    body: tableRows,
                    startY: 110,
                    theme: 'grid',
                    headStyles: { 
                        fillColor: [74, 108, 247],
                        fontSize: 10,
                        halign: 'center'
                    },
                    bodyStyles: {
                        fontSize: 9,
                        halign: 'center'
                    },
                    columnStyles: {
                        0: { cellWidth: 65 }, // Further reduced
                        1: { cellWidth: 20 }, // Further reduced
                        2: { cellWidth: 30 }, // Further reduced
                        3: { cellWidth: 30 }  // Further reduced
                    },
                    margin: { left: 20, right: 20 }, // Increased margins
                    tableWidth: 'auto', // Let the table calculate its own width
                    horizontalPageBreak: true, // Enable horizontal page breaking
                    horizontalPageBreakRepeat: 0 // Repeat the first column on new pages
                });

                // Add total amount
                const finalY = doc.lastAutoTable.finalY || 140;
                doc.setDrawColor(74, 108, 247);
                doc.setLineWidth(0.5);
                doc.line(20, finalY + 10, 190, finalY + 10);

                // Add order summary
                let yPosition = finalY + 20;
                
                // Create a summary box with background for better visibility
                doc.setFillColor(248, 249, 250);
                doc.setDrawColor(230, 230, 230);
                doc.roundedRect(120, finalY + 15, 70, 60, 2, 2, 'FD');
                
                const summaryData = [
                    { label: 'Original Subtotal:', value: `Rs. ${orderData.originalSubtotal.toFixed(2)}` },
                    { label: 'Product Discount:', value: `Rs. ${orderData.productDiscount.toFixed(2)}`, color: [40, 167, 69], prefix: '-' },
                    { label: 'Subtotal:', value: `Rs. ${orderData.subtotal.toFixed(2)}` },
                    { label: 'Delivery Charge:', value: `Rs. ${orderData.deliveryCharge.toFixed(2)}` },
                    { label: 'Total Amount:', value: `Rs. ${orderData.totalAmount.toFixed(2)}`, bold: true }
                ];

                // Filter out zero discount
                const finalSummary = orderData.productDiscount > 0 ? 
                    summaryData : 
                    summaryData.filter(item => item.label !== 'Product Discount:');

                finalSummary.forEach((item, i) => {
                    // Set text color
                    if (item.color) {
                        doc.setTextColor(item.color[0], item.color[1], item.color[2]);
                    } else {
                        doc.setTextColor(0, 0, 0);
                    }

                    // Set font style
                    if (item.bold) {
                        doc.setFont(undefined, 'bold');
                        doc.setFontSize(12);
                    } else {
                        doc.setFont(undefined, 'normal');
                        doc.setFontSize(10);
                    }

                    // Draw a separator line before total amount
                    if (item.label === 'Total Amount:') {
                        doc.setDrawColor(74, 108, 247);
                        doc.setLineWidth(0.3);
                        doc.line(125, yPosition - 5, 185, yPosition - 5);
                    }

                    // Add label with proper alignment
                    doc.text(item.label, 125, yPosition);
                    
                    // Format and align the values
                    const displayValue = (item.prefix || '') + item.value;
                    
                    // Special formatting for discount to make it stand out
                    if (item.label === 'Product Discount:') {
                        doc.setFont(undefined, 'bold');
                        doc.text(displayValue, 185, yPosition, { align: 'right' });
                    } else {
                        doc.text(displayValue, 185, yPosition, { align: 'right' });
                    }
                    
                    // Increase Y position for next line
                    yPosition += 10;
                });

                // Add footer
                doc.setFont(undefined, 'normal');
                doc.setFontSize(10);
                doc.setTextColor(128, 128, 128);
                doc.text('Thank you for shopping with Oxyboo!', 105, yPosition + 20, { align: 'center' });
                
                // Add timestamp
                doc.setFontSize(8);
                doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 280);

                // Save the PDF
                doc.save(`Oxyboo-Invoice-${orderData.orderId}.pdf`);

                // Show success message
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Invoice downloaded successfully!',
                    timer: 2000,
                    showConfirmButton: false
                });

            } catch (error) {
                console.error('Error generating invoice:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to generate invoice. Please try again.'
                });
            }
        }
    </script>

    <!-- Add required CSS for modal -->
    <style>
        .modal {
            display: none;
            position: fixed;
            z-index: 1050;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal.fade.show {
            display: block;
        }

        .modal-dialog {
            position: relative;
            width: auto;
            margin: 1.75rem auto;
            max-width: 500px;
        }

        .modal-content {
            position: relative;
            background-color: #fff;
            border-radius: 0.5rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .modal-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            border-bottom: 1px solid #dee2e6;
        }

        .modal-body {
            padding: 1rem;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
            padding: 1rem;
            border-top: 1px solid #dee2e6;
        }

        .btn-close {
            background: transparent;
            border: 0;
            font-size: 1.5rem;
            padding: 0.5rem;
            cursor: pointer;
        }

        .form-select,
        .form-control {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            margin-bottom: 1rem;
        }
    </style>
</body>

</html>