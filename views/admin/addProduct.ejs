<%- include("../../views/partials/admin/adminHeader.ejs") %>

  <head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css" />

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    <style>
      :root {
        --primary-color: #4f46e5;
        --error-color: #ef4444;
        --border-color: #e5e7eb;
        --text-color: #374151;
      }

      .content-header .content-title {
        font-size: 2rem;
        font-weight: 700;
        color: #343a40;
      }

      .content-header {
        margin: 20px auto;
        text-align: center;
      }

      body {
        font-family: "Inter", sans-serif;
        background-color: #f3f4f6;
        color: var(--text-color);
        line-height: 1.5;
      }

      .container {
        margin-bottom: 100px;
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1rem;
        margin-left: 310px;
      }

      .card {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
      }

      .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: var(--text-color);
        border-bottom: 2px solid var(--border-color);
        padding-bottom: 0.5rem;
      }

      .section-title h2 {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 2.5rem;
        color: var(--text-color);
        border-bottom: 5px solid var(--border-color);
        padding-bottom: 1.5rem;
      }

      .form-group {
        margin-bottom: 1.5rem;
      }

      .form-label {
        display: block;
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: var(--text-color);
      }

      .form-control {
        width: 500px;
        padding: 0.75rem;
        border: 1px solid var(--border-color);
        border-radius: 0.375rem;
        font-size: 1rem;
        transition: border-color 0.15s ease-in-out;
      }

      .form-control:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
      }

      .form-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
      }

      .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 0.375rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.15s ease-in-out;
        border: none;
      }

      .btn-primary {
        background-color: var(--primary-color);
        color: white;
      }

      .btn-primary:hover {
        background-color: #4338ca;
      }

      .btn-danger {
        background-color: var(--error-color);
        color: white;
      }

      .btn-danger:hover {
        background-color: #dc2626;
      }

      .error-message {
        color: var(--error-color);
        font-size: 0.875rem;
        margin-top: 0.25rem;
      }

      .image-upload-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
      }

      .image-upload-box {
        border: 2px dashed var(--border-color);
        border-radius: 0.5rem;
        padding: 1rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.15s ease-in-out;
      }

      .image-upload-box:hover {
        border-color: var(--primary-color);
      }

      .preview-container {
        display: none;
        margin-top: 10px;
      }

      .preview-image {
        max-width: 200px;
        max-height: 200px;
      }

      .delete-button {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 100;
      }

      .cropper-container {
        max-width: 500px;
        margin: 10px 0;
      }

      .actions-container {
        margin-top: 10px;
      }

      /* .thumbnail {
      width: 100px;
      height: 100px;
      object-fit: cover;
      border-radius: 0.375rem;
      margin-right: 0.5rem;
    } */

      .image-upload-box {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        margin-bottom: 10px;
      }

      .image-upload-box:hover {
        border-color: #666;
      }

      .variant-item {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        transition: all 0.2s ease-in-out;
      }

      .variant-item:hover {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      .modal {
        background-color: rgba(0, 0, 0, 0.5);
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: none;
      }

      .modal-dialog {
        max-width: 500px;
        margin: 0 auto;
        position: relative;
        top: 20px; /* Distance from top of screen */
      }

      .modal-content {
        border: none;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        background: #fff;
      }

      .modal-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        border-radius: 12px 12px 0 0;
        padding: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
      }

      .modal-header .modal-title {
        font-weight: 600;
        color: #2d3748;
        font-size: 1.25rem;
        margin: 0;
      }

      .modal-header .close {
        position: absolute;
        right: 1rem;
        top: 1rem;
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #4a5568;
        opacity: 0.7;
        cursor: pointer;
        padding: 0.5rem;
        width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.2s ease;
      }

      .modal-header .close:hover {
        opacity: 1;
        background-color: #e2e8f0;
      }

      .modal-header .close span {
        line-height: 1;
        display: block;
      }

      .modal-body {
        padding: 1.5rem;
      }

      .modal-body .form-group {
        margin-bottom: 1.25rem;
      }

      .modal-body .form-label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: #4a5568;
      }

      .modal-body .form-control {
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 0.75rem;
        width: 100%;
        transition: all 0.2s;
      }

      .modal-body .form-control:focus {
        border-color: #4f46e5;
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
      }

      .modal-body select.form-control {
        appearance: none;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23a0aec0'%3e%3cpath d='M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 1rem;
        padding-right: 2.5rem;
      }

      .modal-footer {
        border-top: 1px solid #e9ecef;
        border-radius: 0 0 12px 12px;
        padding: 1.25rem 1.5rem;
        background-color: #f8f9fa;
      }

      .modal-footer .btn {
        padding: 0.625rem 1.25rem;
        font-weight: 500;
        border-radius: 8px;
        transition: all 0.2s;
      }

      .modal-footer .btn-secondary {
        background-color: #e2e8f0;
        color: #4a5568;
        border: none;
      }

      .modal-footer .btn-secondary:hover {
        background-color: #cbd5e0;
      }

      .modal-footer .btn-primary {
        background-color: #4f46e5;
        border: none;
      }

      .modal-footer .btn-primary:hover {
        background-color: #4338ca;
      }

      /* Animation for modal */
      .modal.fade .modal-dialog {
        transform: translate(0, -50px);
        transition: transform 0.3s ease-out;
      }

      .modal.show .modal-dialog {
        transform: none;
      }

      /* Ensure modal appears on top */
      .modal {
        z-index: 1050;
      }

      .modal-backdrop {
        z-index: 1040;
      }
    </style>
  </head>

  <body>
    <div class="container">
      <form id="addform" action="/admin/addproduct" method="post">
        <!-- Basic Information -->
        <div class="card">
          <h2 class="section-title">Add Product</h2>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label" for="product_name">Product Name</label>
              <input type="text" id="product_name" name="productName" class="form-control"
                placeholder="Enter product name" />
              <div id="productName-error" class="error-message"></div>
            </div>
            <!-- <div class="form-group">
            <label class="form-label">Brand</label>
            <select name="brand" class="form-control">
              <option value="">Select Brand</option>
            </select>
            <div id="brand-error" class="error-message"></div>
          </div> -->
          </div>
          <div class="form-group">
            <label class="form-label">Description</label>
            <textarea id="descriptionid" name="description" class="form-control" rows="4"
              placeholder="Enter product description"></textarea>
            <div id="description-error" class="error-message"></div>
          </div>
          <div class="form-group">
            <label class="form-label">Offer (%)</label>
            <input 
              type="number" 
              id="offer" 
              name="offer" 
              class="form-control" 
              placeholder="Enter offer percentage"
              min="0"
              max="100"
            />
            <div id="offer-error" class="error-message"></div>
          </div>
        </div>

        <!-- Pricing and Inventory -->
       
        <!-- Categories and Attributes -->
        <div class="card">
          <h3 class="section-title">Categories & Attributes</h3>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Category</label>
              <select name="category" class="form-control">
                <option value="">Select Category</option>
                <% categoryInfo.forEach(category=> { %>
                  <option value="<%= category._id %>">
                    <%= category.name %>
                  </option>
                  <% }) %>
              </select>
              <div id="category-error" class="error-message"></div>
            </div>
          </div>
        </div>

        <!-- Image Upload -->
        <div class="card">
          <h3 class="section-title">Product Images</h3>
          <p class="mb-3">
            Upload up to 4 images. First image will be the cover (main) image.
          </p>

          <div class="image-upload-container">
            <% for(let i=1; i <=4; i++) { %>
              <div class="form-group">
                <div class="image-upload-box" onclick="document.getElementById('image<%= i %>').click()">
                  <i class="fas fa-cloud-upload-alt fa-2x mb-2"></i>
                  <p>Click to upload image <%= i %>
                  </p>
                  <input type="file" id="image<%= i %>" name="images" accept="image/png, image/jpeg, image/jpg"
                    style="display: none" onchange="cropper(`<%= i %>`)" />
                </div>
                <div class="preview-container">
                  <img src="" alt="" id="prev<%= i %>" class="preview-image" />
                </div>
                <div class="cropper-container" style="display: none">
                  <img src="" id="croppedImg<%= i %>" alt="" />
                  <div class="actions-container">
                    <button type="button" id="saveButton<%= i %>" class="btn btn-primary">
                      Save Crop
                    </button>
                  </div>
                </div>
              </div>
              <% } %>
          </div>
          <div id="images-error" class="error-message"></div>
        </div>

        <!-- Hidden inputs for cropped images -->
        <input type="hidden" id="photo1" name="image1" />
        <input type="hidden" id="photo2" name="image2" />
        <input type="hidden" id="photo3" name="image3" />
        <input type="hidden" id="photo4" name="image4" />

        <!-- Add this before the Submit Button card -->
        <div class="card">
          <h3 class="section-title">Product Variants</h3>
          <button type="button" class="btn btn-primary" onclick="openVariantModal()">
            <i class="fas fa-plus mr-2"></i> Add Variant
          </button>
          
          <div id="variantsContainer" class="mt-4">
            <!-- Variants will be displayed here -->
          </div>
        </div>

        <!-- Variant Modal -->
        <div class="modal fade" id="variantModal" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static" style="display: none;">
          <div class="modal-dialog" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Add Product Variant</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body">
                <div class="form-group">
                  <label class="form-label">Color</label>
                  <input type="text" id="variantColor" class="form-control" placeholder="Enter color">
                </div>
                <div class="form-group">
                  <label class="form-label">Size</label>
                  <select id="variantSize" class="form-control">
                    <option value="">Select Size</option>
                    <option value="XS">XS</option>
                    <option value="S">S</option>
                    <option value="M">M</option>
                    <option value="L">L</option>
                    <option value="XL">XL</option>
                    <option value="XXL">XXL</option>
                  </select>
                </div>
                <div class="form-group">
                  <label class="form-label">Price</label>
                  <input type="number" id="variantPrice" class="form-control" placeholder="Enter price">
                </div>
                <div class="form-group">
                  <label class="form-label">Stock</label>
                  <input type="number" id="variantStock" class="form-control" placeholder="Enter stock quantity">
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="addVariant()">Add Variant</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Add hidden input for variants data -->
        <input type="hidden" id="variantsData" name="variants">

        <!-- Submit Button -->
        <div class="card">
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save mr-2"></i> Publish Product
          </button>
        </div>
      </form>
    </div>

    <script>
      // Initialize cropper instances object
      let croppers = {};
      let croppedImages = {};

      function cropper(imageNumber) {
        const file = document.getElementById(`image${imageNumber}`).files[0];
        const reader = new FileReader();

        reader.onload = function (e) {
          // Show cropper container and hide preview
          const cropperContainer = document
            .querySelector(`#image${imageNumber}`)
            .closest(".form-group")
            .querySelector(".cropper-container");
          const previewContainer = document
            .querySelector(`#image${imageNumber}`)
            .closest(".form-group")
            .querySelector(".preview-container");
          cropperContainer.style.display = "block";
          previewContainer.style.display = "none";

          // Initialize cropper
          const image = document.getElementById(`croppedImg${imageNumber}`);
          image.src = e.target.result;

          // Destroy existing cropper if it exists
          if (croppers[imageNumber]) {
            croppers[imageNumber].destroy();
          }

          // Create new cropper
          croppers[imageNumber] = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1,
            background: false,
          });

          // Add save button handler
          document.getElementById(`saveButton${imageNumber}`).onclick =
            function () {
              saveCroppedImage(imageNumber);
            };
        };

        if (file) {
          reader.readAsDataURL(file);
        }
      }

      function saveCroppedImage(imageNumber) {
        if (!croppers[imageNumber]) return;

        // Get cropped canvas
        const canvas = croppers[imageNumber].getCroppedCanvas();

        // Convert to base64
        const croppedImageData = canvas.toDataURL("image/jpeg");

        // Store cropped image data
        croppedImages[imageNumber] = croppedImageData;
        document.getElementById(`photo${imageNumber}`).value = croppedImageData;

        // Update preview
        const previewImg = document.getElementById(`prev${imageNumber}`);
        previewImg.src = croppedImageData;

        // Show preview and hide cropper
        const cropperContainer = document
          .querySelector(`#image${imageNumber}`)
          .closest(".form-group")
          .querySelector(".cropper-container");
        const previewContainer = document
          .querySelector(`#image${imageNumber}`)
          .closest(".form-group")
          .querySelector(".preview-container");
        cropperContainer.style.display = "none";
        previewContainer.style.display = "block";

        // Add delete button if it doesn't exist
        if (!document.getElementById(`deleteButton${imageNumber}`)) {
          const deleteButton = document.createElement("button");
          deleteButton.id = `deleteButton${imageNumber}`;
          deleteButton.className = "btn btn-danger mt-2";
          deleteButton.innerHTML = '<i class="fas fa-trash"></i> Delete';
          deleteButton.onclick = function () {
            deleteImage(imageNumber);
          };
          previewContainer.appendChild(deleteButton);
        }

        // Destroy cropper instance
        croppers[imageNumber].destroy();
        croppers[imageNumber] = null;
      }

      function deleteImage(imageNumber) {
        // Clear file input
        const fileInput = document.getElementById(`image${imageNumber}`);
        fileInput.value = "";

        // Clear preview
        const previewImg = document.getElementById(`prev${imageNumber}`);
        previewImg.src = "";

        // Clear hidden input
        document.getElementById(`photo${imageNumber}`).value = "";

        // Remove delete button
        const deleteButton = document.getElementById(
          `deleteButton${imageNumber}`
        );
        if (deleteButton) {
          deleteButton.remove();
        }

        // Clear stored cropped image
        delete croppedImages[imageNumber];

        // Show upload box
        const previewContainer = document
          .querySelector(`#image${imageNumber}`)
          .closest(".form-group")
          .querySelector(".preview-container");
        previewContainer.style.display = "none";

        // Reset cropper if it exists
        if (croppers[imageNumber]) {
          croppers[imageNumber].destroy();
          croppers[imageNumber] = null;
        }
      }
    </script>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("addform");
        const fields = [
          {
            input: document.querySelector('input[name="productName"]'),
            errorElement: document.getElementById("productName-error"),
            validations: [
              {
                validate: (value) => value.trim() !== "",
                message: "Product name is required",
              },
              {
                validate: (value) => !/\d/.test(value),
                message: "Product name cannot contain numbers",
              },
              {
                validate: (value) => /^[a-zA-Z\s]+$/.test(value),
                message: "Product name can only contain letters and spaces",
              },
            ],
          },
          {
            input: document.querySelector('textarea[name="description"]'),
            errorElement: document.getElementById("description-error"),
            validations: [
              {
                validate: (value) => value.trim() !== "",
                message: "Description is required",
              },
            ],
          },
          {
            input: document.querySelector('select[name="category"]'),
            errorElement: document.getElementById("category-error"),
            validations: [
              {
                validate: (value) => value.trim() !== "",
                message: "Category is required",
              },
            ],
          },
        ];

        // Image validation
        const imageInputs = document.querySelectorAll('input[name="images"]');
        const imagesErrorElement = document.getElementById("images-error");
        let hasValidImage = false;

        imageInputs.forEach((input) => {
          input.addEventListener("change", function () {
            if (this.files.length > 0) {
              hasValidImage = true;
              imagesErrorElement.textContent = "";
            }
          });
        });

        form.addEventListener("submit", function (e) {
          e.preventDefault();
          let isValid = true;

          // Reset previous error messages
          fields.forEach((field) => {
            if (field.errorElement) {
              field.errorElement.textContent = "";
            }
          });
          imagesErrorElement.textContent = "";

          // Validate each field
          fields.forEach((field) => {
            if (field.input && field.errorElement) {
              const value = field.input.value;

              for (let validation of field.validations) {
                if (!validation.validate(value)) {
                  field.errorElement.textContent = validation.message;
                  isValid = false;
                  break;
                }
              }
            }
          });

          // Validate images
          if (!hasValidImage) {
            imagesErrorElement.textContent = "At least one image is required";
            isValid = false;
          }

          // Validate variants
          const variantsData = document.getElementById('variantsData').value;
          if (!variantsData || JSON.parse(variantsData).length === 0) {
            alert('Please add at least one product variant');
            isValid = false;
          }

          // If all validations pass, submit the form
          if (isValid) {
            form.submit();
          }
        });
      });
    </script>

    <script>
      let variants = [];

      function openVariantModal() {
        $('#variantModal').modal('show');
      }

      function addVariant() {
        const color = document.getElementById('variantColor').value;
        const size = document.getElementById('variantSize').value;
        const price = document.getElementById('variantPrice').value;
        const stock = document.getElementById('variantStock').value;

        if (!color || !size || !price || !stock) {
          alert('Please fill all fields');
          return;
        }

        const variant = {
          color,
          size,
          price: parseFloat(price),
          stock: parseInt(stock)
        };

        variants.push(variant);
        updateVariantsDisplay();
        document.getElementById('variantsData').value = JSON.stringify(variants);
        $('#variantModal').modal('hide');

        // Reset form
        document.getElementById('variantColor').value = '';
        document.getElementById('variantSize').value = '';
        document.getElementById('variantPrice').value = '';
        document.getElementById('variantStock').value = '';
      }

      function removeVariant(index) {
        variants.splice(index, 1);
        updateVariantsDisplay();
        document.getElementById('variantsData').value = JSON.stringify(variants);
      }

      function updateVariantsDisplay() {
        const container = document.getElementById('variantsContainer');
        container.innerHTML = variants.map((variant, index) => `
          <div class="variant-item card p-3 mb-2">
            <div class="d-flex justify-content-between align-items-center">
              <div>
                <strong>Color:</strong> ${variant.color} | 
                <strong>Size:</strong> ${variant.size} | 
                <strong>Price:</strong> ₹${variant.price} | 
                <strong>Stock:</strong> ${variant.stock}
              </div>
              <button type="button" class="btn btn-danger btn-sm" onclick="removeVariant(${index})">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        `).join('');
      }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
  </body>

  <%- include("../../views/partials/admin/adminFooter.ejs") %>