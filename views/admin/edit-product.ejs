<%- include("../../views/partials/admin/adminHeader.ejs") %>

  <head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css" />

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />

    <style>
      :root {
        --primary-color: #4f46e5;
        --error-color: #ef4444;
        --border-color: #e5e7eb;
        --text-color: #374151;
      }

      .content-header .content-title {
        font-size: 2rem;
        font-weight: 700;
        color: #343a40;
      }

      .content-header {
        margin: 20px auto;
        text-align: center;
      }

      body {
        font-family: "Inter", sans-serif;
        background-color: #f3f4f6;
        color: var(--text-color);
        line-height: 1.5;
      }

      .container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1rem;
        margin-left: 300px;
      }

      .card {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        padding: 1.5rem;
        margin-bottom: 1.5rem;
      }

      .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: var(--text-color);
        border-bottom: 2px solid var(--border-color);
        padding-bottom: 0.5rem;
      }

      .form-group {
        margin-bottom: 1.5rem;
      }

      .form-label {
        display: block;
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: var(--text-color);
      }

      .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid var(--border-color);
        border-radius: 0.375rem;
        font-size: 1rem;
        transition: border-color 0.15s ease-in-out;
      }

      .form-control:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
      }

      .form-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
      }

      .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 0.375rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.15s ease-in-out;
        border: none;
      }

      .btn-primary {
        background-color: var(--primary-color);
        color: white;
      }

      .btn-primary:hover {
        background-color: #4338ca;
      }

      .btn-danger {
        background-color: var(--error-color);
        color: white;
      }

      .btn-danger:hover {
        background-color: #dc2626;
      }

      .error-message {
        color: var(--error-color);
        font-size: 0.875rem;
        margin-top: 0.25rem;
      }

      .image-upload-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
      }

      .image-upload-box {
        border: 2px dashed var(--border-color);
        border-radius: 0.5rem;
        padding: 1rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.15s ease-in-out;
      }

      .image-upload-box:hover {
        border-color: var(--primary-color);
      }

      .preview-container {
        position: relative;
        margin-top: 10px;
        display: block;
      }

      .preview-image {
        max-width: 200px;
        max-height: 200px;
        display: block;
        margin: 0 auto;
      }

      .delete-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: #ef4444;
        color: white;
        border: none;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .cropper-container {
        max-width: 500px;
        margin: 10px 0;
        width: 100%;
        height: auto;
        position: relative;
      }

      .actions-container {
        margin-top: 10px;
      }

      /* .thumbnail {
      width: 100px;
      height: 100px;
      object-fit: cover;
      border-radius: 0.375rem;
      margin-right: 0.5rem;
    } */

      .image-upload-box {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        margin-bottom: 10px;
      }

      .image-upload-box:hover {
        border-color: #666;
      }

      .variant-card {
        background: #f8fafc;
        border: 1px solid var(--border-color);
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
      }

      .variant-header {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-color);
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--border-color);
      }

      .variant-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
      }

      .variant-input-group {
        display: flex;
        flex-direction: column;
      }

      .variant-input-group .form-label {
        color: #6b7280;
        font-size: 0.9rem;
        margin-bottom: 0.3rem;
      }

      .variant-input-group .form-control {
        background-color: white;
        border: 1px solid #e2e8f0;
      }

      .variant-input-group .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);
      }

      .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
      }

      .modal-content {
        background-color: white;
        width: 90%;
        max-width: 500px;
        margin: 50px auto;
        padding: 2rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      .modal-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 1.5rem;
      }

      .mb-3 {
        margin-bottom: 1rem;
      }
    </style>
  </head>

  <body>
    <div class="container">
      <form id="addform" >
        <!-- Basic Information -->
        <div class="card">
          <h3 class="section-title">Edit Product</h3>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label" for="product_name">Product Name</label>
              <input type="text" id="product_name" name="productName" class="form-control"
                value="<%= product.productName %>" placeholder="Enter product name" />
              <div id="productName-error" class="error-message"></div>
            </div>
          </div>
          <div class="form-group">
            <label class="form-label">Description</label>
            <textarea id="descriptionid" name="description" class="form-control" rows="4"
              placeholder="Enter product description"><%= product.description  %></textarea>
            <div id="description-error" class="error-message"></div>
          </div>
        </div>

        <!-- Pricing and Inventory -->
       

        <!-- Categories and Attributes -->
        <div class="card">
          <h3 class="section-title">Categories & Attributes</h3>
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Category</label>
              <select name="category" class="form-control">
                <% categoryInfo.forEach(category=> { %>
                  <option value="<%= category._id %>">
                    <%= category.name %>
                  </option>
                <% }) %>
              </select>
              <div id="category-error" class="error-message"></div>
            </div>
          </div>
        </div>

        <!-- Variants Section -->
        <div class="card">
          <h3 class="section-title">Variants</h3>
          <button type="button" class="btn btn-primary mb-3" onclick="openVariantModal()">
            <i class="fas fa-plus"></i> Add Variant
          </button>
          <div id="variant-container" class="form-row">
            <% product.variants.forEach((variant, index) => { %>
              <div class="variant-card">
                <div class="variant-header">
                  <%= variant.color %> - <%= variant.size %>
                </div>
                <div class="variant-grid">
                  <div class="variant-input-group">
                    <label class="form-label">Stock</label>
                    <input 
                      type="number" 
                      name="variants[<%= index %>][stock]" 
                      class="form-control"
                      value="<%= variant.stock %>"
                      min="0"
                    />
                  </div>
                  <div class="variant-input-group">
                    <label class="form-label">Price ($)</label>
                    <input 
                      type="number" 
                      name="variants[<%= index %>][price]" 
                      class="form-control"
                      value="<%= variant.price %>"
                      min="0"
                      step="0.01"
                    />
                  </div>
                </div>
                <input type="hidden" name="variants[<%= index %>][color]" value="<%= variant.color %>" />
                <input type="hidden" name="variants[<%= index %>][size]" value="<%= variant.size %>" />
                <input type="hidden" name="variants[<%= index %>][_id]" value="<%= variant._id %>" />
              </div>
            <% }) %>
          </div>
        </div>

        <!-- Add Variant Modal -->
        <div id="variantModal" class="modal">
          <div class="modal-content">
            <h4>Add New Variant</h4>
            <div class="variant-form">
              <div class="form-group">
                <label class="form-label">Color</label>
                <input type="text" id="newColor" class="form-control" placeholder="Enter color">
              </div>
              <div class="form-group">
                <label class="form-label">Size</label>
                <input type="text" id="newSize" class="form-control" placeholder="Enter size">
              </div>
              <div class="form-group">
                <label class="form-label">Stock</label>
                <input type="number" id="newStock" class="form-control" min="0" placeholder="Enter stock">
              </div>
              <div class="form-group">
                <label class="form-label">Price ($)</label>
                <input type="number" id="newPrice" class="form-control" min="0" step="0.01" placeholder="Enter price">
              </div>
              <div class="modal-actions">
                <button type="button" class="btn btn-primary" onclick="addNewVariant()">Add</button>
                <button type="button" class="btn btn-danger" onclick="closeVariantModal()">Cancel</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Image Upload Section -->
        <div class="card">
          <h3 class="section-title">Product Images</h3>
          <p class="mb-3">
            Upload up to 4 images. First image will be the cover (main) image.
          </p>
<% console.log(product); %>
          <div class="image-upload-container">
            <% for(let i=1; i <=4; i++) { %>
              <div class="form-group">
                <div class="image-upload-box" onclick="document.getElementById('image<%= i %>').click()">
                  <i class="fas fa-cloud-upload-alt fa-2x mb-2"></i>
                  <p>Click to upload image <%= i %></p>
                  <input type="file" id="image<%= i %>" name="images" 
                    accept="image/png, image/jpeg, image/jpg"
                    style="display: none" 
                    onchange="handleImageSelect(<%= i %>)" />
                </div>

                <div class="preview-container" id="previewContainer<%= i %>">
                  <% if(product['image' + i]) { %>
                    <img src="/<%= product['image' + i] %>" alt="Image <%= i %>" 
                      id="prev<%= i %>" class="preview-image" />
                  <% } %>
                </div>

                <input type="hidden" id="photo<%= i %>" name="image<%= i %>" 
                  value="<%= product['image' + i] %>" />
              </div>
            <% } %>
          </div>
        </div>

        <!-- Submit Button -->
        <div class="card">
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save mr-2"></i> Edit Product
          </button>
        </div>
      </form>

    </div>

    <script>
      let croppers = {};

      function handleImageSelect(imageNumber) {
        const files = document.getElementById(`image${imageNumber}`);
        const preview = document.getElementById(`prev${imageNumber}`);
        const file = files.files[0];

        if (file) {
          const objectURL = URL.createObjectURL(file);
          preview.src = objectURL;
          preview.style.display = "block";

          if (croppers[imageNumber]) {
            croppers[imageNumber].destroy();
          }

          // Initialize a new Cropper
          croppers[imageNumber] = new Cropper(preview, {
            aspectRatio: 1,
            cropBoxResizable: false,
            cropBoxMovable: true,
            dragMode: "none",
            ready: function () {
              this.cropper.setCropBoxData({
                width: 100,
                height: 100,
              });
            },
          });
        }
      }

      // Add form submit handler
      document.getElementById("addform").addEventListener("submit", (event) => {
        let images = []; // Initialize the array
        for (let i = 1; i <= 4; i++) {
          const canvas = croppers[i]?.getCroppedCanvas();
          const base64Image = canvas ? canvas.toDataURL("image/png") : ""; 
          images.push(base64Image);
        }

        // Set the hidden input fields' values
        document.getElementById("photo1").value = images[0];
        document.getElementById("photo2").value = images[1];
        document.getElementById("photo3").value = images[2];
        document.getElementById("photo4").value = images[3];

        // Now submit the form
        event.preventDefault(); 
        event.target.submit(); 
      });
    </script>

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('addform');
        const fields = [
          {
            input: document.querySelector('input[name="productName"]'),
            errorElement: document.getElementById('productName-error'),
            validations: [
              {
                validate: (value) => value.trim() !== '',
                message: 'Product name is required'
              },
              {
                validate: (value) => !/\d/.test(value),
                message: 'Product name cannot contain numbers'
              },
              {
                validate: (value) => /^[a-zA-Z\s]+$/.test(value),
                message: 'Product name can only contain letters and spaces'
              }
            ]
          },
          {
            input: document.querySelector('textarea[name="description"]'),
            errorElement: document.getElementById('description-error'),
            validations: [
              {
                validate: (value) => value.trim() !== '',
                message: 'Description is required'
              }
            ]
          },
          {
            input: document.querySelector('input[name="salePrice"]'),
            errorElement: document.getElementById('salePrice-error'),
            validations: [
              {
                validate: (value) => value.trim() !== '',
                message: 'Sale price is required'
              },
              {
                validate: (value) => /^\$?(\d+(\.\d{1,2})?)$/.test(value),
                message: 'Invalid price format'
              }
            ]
          },
          {
            input: document.querySelector('input[name="quantity"]'),
            errorElement: document.getElementById('quantity-error'),
            validations: [
              {
                validate: (value) => value.trim() !== '',
                message: 'Quantity is required'
              },
              {
                validate: (value) => /^\d+$/.test(value),
                message: 'Quantity must be a positive number'
              }
            ]
          },
          {
            input: document.querySelector('select[name="category"]'),
            errorElement: document.getElementById('category-error'),
            validations: [
              {
                validate: (value) => value.trim() !== '',
                message: 'Category is required'
              }
            ]
          },
          {
            input: document.querySelector('input[name="color"]'),
            errorElement: document.getElementById('color-error'),
            validations: [
              {
                validate: (value) => value.trim() !== '',
                message: 'Color is required'
              },
              {
                validate: (value) => /^[a-zA-Z\s]+$/.test(value),
                message: 'Color can only contain letters and spaces'
              }
            ]
          }
        ];

        // Image validation function
        function validateImages() {
          const imageInputs = document.querySelectorAll('input[name="images"]');
          const imagesErrorElement = document.getElementById('images-error');
          let imageValidationPassed = true;

          imageInputs.forEach(input => {
            if (input.files.length > 0) {
              const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];
              if (!allowedTypes.includes(input.files[0].type)) {
                if (imagesErrorElement) {
                  imagesErrorElement.textContent = 'Only JPEG, PNG, and JPG images are allowed';
                }
                imageValidationPassed = false;
              }
            }
          });

          return imageValidationPassed;
        }

        form.addEventListener('submit', async function (e) {
          e.preventDefault();

          let isValid = true;

          // Reset previous error messages
          fields.forEach(field => {
            if (field.errorElement) {
              field.errorElement.textContent = '';
            }
          });

          const imagesErrorElement = document.getElementById('images-error');
          if (imagesErrorElement) {
            imagesErrorElement.textContent = '';
          }
       
          

          // If all validations pass, proceed with form submission
          if (1) {
            const formData = new FormData(this);
            const productId = new URLSearchParams(window.location.search).get("id");
            alert(productId)
            const formDataObject = {};

            formData.forEach((value, key) => {
              formDataObject[key] = value;
            });

            const filteredProduct = Object.keys(formDataObject)
              .filter(key =>
                !key.startsWith('deleteImage') &&
                formDataObject[key] !== '' &&
                formDataObject[key] !== '{}'
              )
              .reduce((obj, key) => {
                obj[key] = formDataObject[key];
                return obj;
              }, {});
console.log(filteredProduct);

            try {
              const response = await fetch(`/admin/editProduct/${productId}`, {
                method: "POST",
                body: JSON.stringify(filteredProduct),
                headers: {
                  "Content-Type": "application/json"
                }
              });

              const data = await response.json();
              
              if (data.success) {
                
             
                  
               
                    window.location.href = "/admin/product";
                  
                
              } else {
                throw new Error(data.message);
              }
            } catch (error) {
              console.error("Error updating product:", error);
              Swal.fire({
                icon: "error",
                title: "Error!",
                text: "Failed to update product: " + error.message,
              });
            }
          }
        });
      });
    </script>
    

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

    <script>
      function openVariantModal() {
        document.getElementById('variantModal').style.display = 'block';
      }

      function closeVariantModal() {
        document.getElementById('variantModal').style.display = 'none';
      }

      function addNewVariant() {
        const color = document.getElementById('newColor').value;
        const size = document.getElementById('newSize').value;
        const stock = document.getElementById('newStock').value;
        const price = document.getElementById('newPrice').value;

        if (!color || !size || !stock || !price) {
          alert('Please fill all fields');
          return;
        }

        // Update the selector to target the form-row inside the variants card
        const variantContainer = document.getElementById('variant-container');
        const newIndex = document.querySelectorAll('.variant-card').length;

        const variantHTML = `
          <div class="variant-card">
            <div class="variant-header">
              ${color} - ${size}
            </div>
            <div class="variant-grid">
              <div class="variant-input-group">
                <label class="form-label">Stock</label>
                <input 
                  type="number" 
                  name="variants[${newIndex}][stock]" 
                  class="form-control"
                  value="${stock}"
                  min="0"
                />
              </div>
              <div class="variant-input-group">
                <label class="form-label">Price ($)</label>
                <input 
                  type="number" 
                  name="variants[${newIndex}][price]" 
                  class="form-control"
                  value="${price}"
                  min="0"
                  step="0.01"
                />
              </div>
            </div>
            <input type="hidden" name="variants[${newIndex}][color]" value="${color}" />
            <input type="hidden" name="variants[${newIndex}][size]" value="${size}" />
            <input type="hidden" name="variants[${newIndex}][_id]" value="" />
          </div>
        `;

        variantContainer.insertAdjacentHTML('beforeend', variantHTML);
        closeVariantModal();

        // Reset form
        document.getElementById('newColor').value = '';
        document.getElementById('newSize').value = '';
        document.getElementById('newStock').value = '';
        document.getElementById('newPrice').value = '';
      }

      // Close modal when clicking outside
      window.onclick = function(event) {
        const modal = document.getElementById('variantModal');
        if (event.target === modal) {
          closeVariantModal();
        }
      }
    </script>
  </body>

  </main>


  </body>

  </html>